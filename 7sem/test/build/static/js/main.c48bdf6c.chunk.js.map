{"version":3,"sources":["components/CityCard.js","components/BigCity.js","components/SavedCity.js","components/CitiesPanel.js","components/Wrapper.js","App.js","serviceWorker.js","reducer/reducer.js","index.js"],"names":["CityCard","this","parseJson","coord","props","json","wind","humidity","pressure","clouds","class","Component","BigCity","setState","name","icon","temp","iconLink","alt","width","src","SavedCity","appKey","findWeatherDetailsForName","post","title","done","url","callback","console","log","httpRequest","XMLHttpRequest","onreadystatechange","readyState","status","responseText","error","setError","open","send","searchInput","searchLink","httpRequestAsync","response","JSON","parse","weather","lon","lat","speed","main","description","parseInt","state","className","role","CitiesPanel","prevId","Math","round","random","handleSubmit","event","posts","length","document","getElementById","innerText","preventDefault","getTitle","value","data","id","dispatch","type","ref","input","required","placeholder","onClick","map","delete","key","connect","Wrapper","positionAllowed","downloadFlag","navigator","geolocation","getCurrentPosition","position","findWeatherDetailsForCoords","coords","inputValue","onChange","evt","updateInputValue","target","latitude","longitude","App","Boolean","window","location","hostname","match","cityReducer","action","concat","filter","el","oldState","serialisedState","localStorage","getItem","err","loadState","store","createStore","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAEaA,EAAb,6LAGQC,KAAKC,cAHb,kCAOQD,KAAKE,MAAQF,KAAKG,MAAMC,KAAKF,MAC7BF,KAAKK,KAAOL,KAAKG,MAAMC,KAAKC,KAC5BL,KAAKM,SAAWN,KAAKG,MAAMC,KAAKE,SAChCN,KAAKO,SAAWP,KAAKG,MAAMC,KAAKG,SAChCP,KAAKQ,OAASR,KAAKG,MAAMC,KAAKI,SAXtC,+BAiBY,OADJR,KAAKC,YAEG,6BACI,yBAAKQ,MAAM,kCACP,yBAAKA,MAAM,SAAX,kCACA,yBAAKA,MAAM,oBAAoBT,KAAKK,OAExC,yBAAKI,MAAM,kCACP,yBAAKA,MAAM,SAAX,gEACA,yBAAKA,MAAM,oBAAoBT,KAAKQ,SAExC,yBAAKC,MAAM,kCACP,yBAAKA,MAAM,SAAX,oDACA,yBAAKA,MAAM,oBAAoBT,KAAKO,WAExC,yBAAKE,MAAM,kCACP,yBAAKA,MAAM,SAAX,0DACA,yBAAKA,MAAM,oBAAoBT,KAAKM,WAExC,yBAAKG,MAAM,kCACP,yBAAKA,MAAM,SAAX,gEACA,yBAAKA,MAAM,oBAAX,IAAgCT,KAAKE,MAArC,WArCxB,GAA8BQ,aCCjBC,EAAb,6LAEQX,KAAKY,SAAS,CAACR,KAAMJ,KAAKG,MAAMC,SAFxC,+BAMQ,IAAIS,EAAOb,KAAKG,MAAMC,KAAKS,KACvBC,EAAOd,KAAKG,MAAMC,KAAKU,KACvBC,EAAOf,KAAKG,MAAMC,KAAKW,KACvBC,EAAW,qCAAuCF,EAAO,UAE7D,OAA8B,GAA1Bd,KAAKG,MAAMC,KAAKI,OAAoB,kCAGhC,yBAAKC,MAAM,kBACP,yBAAKA,MAAM,OACP,yBAAKA,MAAM,SACP,4BAAKI,GACL,yBAAKJ,MAAM,OACP,yBAAKA,MAAM,SACP,yBAAKQ,IAAI,OAAOC,MAAM,QAAQC,IAAKH,KAEvC,wBAAIP,MAAM,2BAA2BM,KAG7C,yBAAKN,MAAM,SACP,kBAAC,EAAD,CAAUL,KAAMJ,KAAKG,MAAMC,cA1BvD,GAA6BM,a,QCAhBU,EAAb,2MAMIC,OAAS,mCANb,oFAEQrB,KAAKsB,0BAA0BtB,KAAKG,MAAMoB,KAAKC,OAC/CxB,KAAKY,SAAS,CAACa,MAAM,MAH7B,uCAQqBC,EAAKC,GAAW,IAAD,OAC5BC,QAAQC,IAAI,SACZ,IAAIC,EAAc,IAAIC,eACtBD,EAAYE,mBAAqB,WACE,IAA3BF,EAAYG,YAA2C,MAAvBH,EAAYI,QAC5CP,EAASG,EAAYK,cACrB,EAAKvB,SAAS,CAACwB,OAAO,KACQ,MAAvBN,EAAYI,QACnB,EAAKG,YAGbP,EAAYQ,KAAK,MAAOZ,GAAK,GAC7BI,EAAYS,SApBpB,iCA0BQX,QAAQC,IAAI,mBACZ7B,KAAKY,SAAS,CAACwB,OAAO,MA3B9B,gDA8B8BI,GAAc,IAAD,OAEnC,GADAxC,KAAKY,SAAS,CAACa,MAAM,IACD,KAAhBe,OACG,CACH,IAAIC,EAAa,qDAAuDD,EAAc,UAAYxC,KAAKqB,OACvGrB,KAAK0C,iBAAiBD,GAAY,SAACE,GAC/B,IAAIvC,EAAOwC,KAAKC,MAAMF,GACtB,EAAK/B,SACD,CACIR,KAAM,CACFS,KAAMT,EAAKS,KACXC,KAAMV,EAAK0C,QAAQ,GAAGhC,KACtBZ,MAAOE,EAAKF,MAAM6C,IAAM,KAAO3C,EAAKF,MAAM8C,IAC1C3C,KAAMD,EAAKC,KAAK4C,MAAQ,OACxB3C,SAAUF,EAAK8C,KAAK5C,SAAW,KAC/BC,SAAUH,EAAK8C,KAAK3C,SAAW,OAC/BC,OAAQJ,EAAK0C,QAAQ,GAAGK,YACxBpC,KAAMqC,SAAShD,EAAK8C,KAAKnC,KAAO,KAAO,SAE3CU,MAAM,UAjD9B,+BA4DQ,GADAG,QAAQC,IAAI7B,KAAKG,MAAMoB,KAAKC,MAAOxB,KAAKoC,OAChB,GAApBpC,KAAKqD,MAAMjB,MAEX,OACI,mPAKJ,GAAIpC,KAAKqD,MAAM5B,KAAM,CAEjB,IAAIX,EAAOd,KAAKqD,MAAMjD,KAAKU,KACvBC,EAAOf,KAAKqD,MAAMjD,KAAKW,KACvBC,EAAW,qCAAuCF,EAAO,UAC7D,OACI,yBAAKL,MAAM,iBACP,yBAAKA,MAAM,YACP,yBAAKA,MAAM,YACP,wBAAIA,MAAM,WAAWM,GACrB,yBAAKE,IAAI,OAAOE,IAAKH,MAG7B,kBAAC,EAAD,CAAUZ,KAAMJ,KAAKqD,MAAMjD,QAKnC,OACI,6BACI,6BAAMJ,KAAKG,MAAMoB,KAAKC,OACtB,gMACA,yBAAK8B,UAAU,qBAAqBC,KAAK,UACrC,0BAAMD,UAAU,WAAhB,oBA3F5B,GAA+B5C,aCEzB8C,E,2MACFC,OAASC,KAAKC,MAAsB,IAAhBD,KAAKE,U,EACzBC,aAAe,SAAAC,GAEX,GAAgC,IAA5B,EAAK3D,MAAM4D,MAAMC,OACjBC,SAASC,eAAe,aAAaC,UAAY,6HAChD,CACDF,SAASC,eAAe,aAAaC,UAAY,IACjDL,EAAMM,iBACN,IAAM5C,EAAQ,EAAK6C,SAASC,MACtBC,EAAO,CACTC,GAAK,EAAKf,QAAU,EACpBjC,SAEJI,QAAQC,IAAI0C,GACZ,EAAKpE,MAAMsE,SAAS,CAChBC,KAAM,WACNH,SAEJ,EAAKF,SAASC,MAAQ,K,wEAM1B,IAAMC,EAAO,CACTC,GAAIxE,KAAKwE,IAEb5C,QAAQC,IAAI0C,GACZvE,KAAKG,MAAMsE,SAAS,CAChBC,KAAM,cACNH,W,+BAOE,IAAD,OAEL,OACI,yBAAK9D,MAAM,iBACP,6BACI,yBAAKA,MAAM,kBACP,yBAAKA,MAAM,OACP,yBAAKA,MAAM,iBAAX,0DACA,yBAAKA,MAAM,uCACP,6BACA,2BAAOA,MAAM,gCAAgCkE,IAAK,SAAAC,GAAK,OAAI,EAAKP,SAAWO,GAAOC,UAAQ,EAACH,KAAK,OACzFI,YAAY,mHACnB,4BAAQJ,KAAK,QAAQjE,MAAM,aAAasE,QAAS/E,KAAK6D,cAAtD,MAEA,yBAAKW,GAAG,YAAY/D,MAAM,qBAA1B,SAKhB,yBAAKA,MAAM,OACNT,KAAKG,MAAM4D,MAAMiB,KAAI,SAAAzD,GAAI,OACrB,yBAAKd,MAAM,SACJ,yBAAKA,MAAM,YACP,yBAAKA,MAAM,mBAAkB,wBAAIA,MAAM,QAAQc,EAAKC,QACpD,yBAAKf,MAAM,oBACP,4BAAQA,MAAM,aAAasE,QAAS,WAChC,EAAKP,GAAKjD,EAAKiD,GACf,EAAKS,WAFT,OAOR,kBAAC,EAAD,CAAWC,IAAK3D,EAAKiD,GAAIjD,KAAMA,c,GAtErCb,aAwFXyE,eALS,SAAC9B,GACrB,MAAO,CACHU,MAAOV,KAGA8B,CAAyB3B,GCzF3B4B,EAAb,2MA+JI/D,OAAS,mCA/Jb,oFAE0B,IAAD,OACjBrB,KAAKY,SAAS,CACVyE,iBAAiB,EAAOC,cAAc,EAAOlF,KAAM,CAC/CF,MAAO,IACPG,KAAM,IACNC,SAAU,IACVC,SAAU,IACVC,OAAQ,IACRK,KAAM,GACNE,KAAM,GACND,KAAM,KAEVW,KAAM,UAEV8D,UAAUC,YAAYC,oBAAmB,SAACC,GAClC,EAAK9E,SAAS,CAACyE,iBAAiB,IAChC,EAAKM,4BAA4BD,EAASE,WAG9C,SAACF,GACG,EAAK9E,SAAS,CAACyE,iBAAiB,IAChCzD,QAAQC,IAAI,EAAKwB,MAAMjD,WAvBvC,+BA8Bc,IAAD,OACL,OAAwB,GAApBJ,KAAKqD,MAAMjB,MAGP,yBAAKkB,UAAU,aACX,yBAAK7C,MAAM,YACP,0BAAM6C,UAAU,iBAAhB,sGACA,2BAAO7C,MAAM,0BAA0B6D,MAAOtE,KAAKqD,MAAMwC,WAAYf,YAAY,4EAC1EgB,SAAU,SAAAC,GAAG,OAAI,EAAKC,iBAAiBD,MAE9C,4BAAQtF,MAAM,4BAA4BsE,QAAS,WAC/C,EAAKzD,0BAA0B,EAAK+B,MAAMwC,cAD9C,mCAMJ,wBAAIpF,MAAM,SAAV,oKACA,kBAAC,EAAD,OAKJT,KAAKqD,MAAMgC,gBAGP,6BACI,gCACI,yBAAK5E,MAAM,aACP,yBAAKA,MAAM,YACP,yBAAKA,MAAM,SACP,0BAAMA,MAAM,OAAZ,wEAEJ,yBAAKA,MAAM,yBACP,4BAAQA,MAAM,qBAAqBsE,QAAS,WACxCQ,UAAUC,YAAYC,oBAAmB,SAACC,GAEtC,EAAKC,4BAA4BD,EAASE,aAHlD,qHAWhB,kBAAC,EAAD,CAASxF,KAAMJ,KAAKqD,MAAMjD,KAAMqB,KAAMzB,KAAKqD,MAAM5B,OACjD,kBAAC,EAAD,OAIJzB,KAAKqD,MAAM5B,KAGP,yBAAKhB,MAAM,aACP,yBAAKA,MAAM,YACP,0BAAMA,MAAM,gBAAZ,sGACA,2BAAOA,MAAM,2BAA2B6D,MAAOtE,KAAKqD,MAAMwC,WACnDC,SAAU,SAAAC,GAAG,OAAI,EAAKC,iBAAiBD,IAAMjB,YAAY,8EAEhE,4BAAQrE,MAAM,4BAA4BsE,QAAS,WAC/C,EAAKzD,0BAA0B,EAAK+B,MAAMwC,cAD9C,mCAMJ,kBAAC,EAAD,CAASzF,KAAMJ,KAAKqD,MAAMjD,OAC1B,kBAAC,EAAD,OA4BJ,yBAAKK,MAAM,yBACP,yBAAK6C,UAAU,YACX,yBAAKA,UAAU,SACX,0BAAMA,UAAU,OAAhB,wEAEJ,yBAAKA,UAAU,yBACX,4BAAQA,UAAU,qBAAqByB,QAAS,WAC5CQ,UAAUC,YAAYC,oBAAmB,SAACC,GAEtC,EAAKC,4BAA4BD,EAASE,aAHlD,mHAUR,+LACA,yBAAKtC,UAAU,qBAAqBC,KAAK,UACrC,0BAAMD,UAAU,WAAhB,eAEJ,kBAAC,EAAD,SA/I5B,uCAyJqByC,GACb/F,KAAKY,SAAS,CACViF,WAAYE,EAAIE,OAAO3B,UA3JnC,gDAiK8B9B,GAAc,IAAD,OAEnC,GADAxC,KAAKY,SAAS,CAACa,MAAM,IACD,KAAhBe,OAEG,CACH,IAAIC,EAAa,qDAAuDD,EAAc,UAAYxC,KAAKqB,OAEvGrB,KAAK0C,iBAAiBD,GAAY,SAACE,GAC/B,IAAIvC,EAAOwC,KAAKC,MAAMF,GACtB,EAAK/B,SAAS,CACVR,KAAM,CACFF,MAAOE,EAAKF,MAAM6C,IAAM,KAAO3C,EAAKF,MAAM8C,IAC1C3C,KAAMD,EAAKC,KAAK4C,MAAQ,OACxB3C,SAAUF,EAAK8C,KAAK5C,SAAW,KAC/BC,SAAUH,EAAK8C,KAAK3C,SAAW,OAC/BC,OAAQJ,EAAK0C,QAAQ,GAAGK,YACxBrC,KAAMV,EAAK0C,QAAQ,GAAGhC,KACtBD,KAAMT,EAAKS,KACXE,KAAMqC,SAAShD,EAAK8C,KAAKnC,KAAO,KAAO,SAE3CU,MAAM,UArL1B,kDA6LgCmE,GAAS,IAAD,OAChC5F,KAAKY,SAAS,CAACa,MAAM,IACrB,IAAIgB,EAAa,uDAAyDmD,EAAOM,SAAW,QAAUN,EAAOO,UAAY,UAAYnG,KAAKqB,OAC1IrB,KAAK0C,iBAAiBD,GAAY,SAACE,GAC/B,IAAIvC,EAAOwC,KAAKC,MAAMF,GACtB,EAAK/B,SAAS,CACVR,KAAM,CACFF,MAAOE,EAAKF,MAAM6C,IAAM,KAAO3C,EAAKF,MAAM8C,IAC1C3C,KAAMD,EAAKC,KAAK4C,MAAQ,OACxB3C,SAAUF,EAAK8C,KAAK5C,SAAW,KAC/BC,SAAUH,EAAK8C,KAAK3C,SAAW,OAC/BC,OAAQJ,EAAK0C,QAAQ,GAAGK,YACxBrC,KAAMV,EAAK0C,QAAQ,GAAGhC,KACtBD,KAAMT,EAAKS,KACXE,KAAMqC,SAAShD,EAAK8C,KAAKnC,KAAO,KAAO,SAE3CU,MAAM,SA7MtB,uCA4NqBC,EAAKC,GAAW,IAAD,OAC5BC,QAAQC,IAAI,SACZ,IAAIC,EAAc,IAAIC,eACtBD,EAAYE,mBAAqB,WACE,IAA3BF,EAAYG,YAA2C,MAAvBH,EAAYI,QAC5CP,EAASG,EAAYK,cACrB,EAAKvB,SAAS,CAACwB,OAAO,KAEQ,MAAvBN,EAAYI,QACnB,EAAKG,YAGbP,EAAYQ,KAAK,MAAOZ,GAAK,GAC7BI,EAAYS,SAzOpB,iCA8PQvC,KAAKY,SAAS,CAACwB,OAAO,QA9P9B,GAA6B1B,aCcd0F,MAXf,WACE,OACE,6BACE,iCAEA,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,IAUeC,EAVK,WAAyB,IAAxBrD,EAAuB,uDAAf,GAAIsD,EAAW,uCACxC,OAAQA,EAAOjC,MACX,IAAK,WACD,OAAOrB,EAAMuD,OAAO,CAACD,EAAOpC,OAChC,IAAK,cACD,OAAOlB,EAAMwD,QAAO,SAAAC,GAAE,OAAIA,EAAGtC,KAAOmC,EAAOpC,KAAKC,MACpD,QACI,OAAOnB,I,eCsCb0D,EAtBY,WACd,IAEI,IAAMC,EAAkBV,OAAOW,aAAaC,QAAQ,aAIpD,IAAKF,EAAiB,OAGtB,OAAOpE,KAAKC,MAAMmE,GACpB,MAAOG,GAIL,QAOSC,GACXC,EAAQC,YAAYZ,EAAaK,GACvCM,EAAME,WAAU,YAnCE,SAAClE,GACf,IAEI,IAAM2D,EAAkBpE,KAAK4E,UAAUnE,GAGvCiD,OAAOW,aAAaQ,QAAQ,YAAaT,GAC3C,MAAOG,KA6BTO,CAAUL,EAAMM,eAEpBC,IAASC,OAAO,kBAAC,IAAD,CAAUR,MAAOA,GAAjB,IAAyB,kBAAC,EAAD,OAAoBpD,SAASC,eAAe,SF+E/E,kBAAmBqB,WACrBA,UAAUuC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c48bdf6c.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport class CityCard extends Component {\n\n    componentWillMount() {\n        this.parseJson()\n    }\n\n    parseJson() {\n        this.coord = this.props.json.coord;\n        this.wind = this.props.json.wind;\n        this.humidity = this.props.json.humidity;\n        this.pressure = this.props.json.pressure;\n        this.clouds = this.props.json.clouds;\n    }\n\n\n    render() {\n        this.parseJson();\n            return (\n                <div >\n                    <div class=\"alert alert-dark row px-0 mx-1\">\n                        <div class=\"col-6\">Ветер</div>\n                        <div class=\"col-6 text-right\">{this.wind}</div>\n                    </div>\n                    <div class=\"alert alert-dark row px-0 mx-1\">\n                        <div class=\"col-6\">Облачность</div>\n                        <div class=\"col-6 text-right\">{this.clouds}</div>\n                    </div>\n                    <div class=\"alert alert-dark row px-0 mx-1\">\n                        <div class=\"col-6\">Давление</div>\n                        <div class=\"col-6 text-right\">{this.pressure}</div>\n                    </div>\n                    <div class=\"alert alert-dark row px-0 mx-1\">\n                        <div class=\"col-6\">Влажность</div>\n                        <div class=\"col-6 text-right\">{this.humidity}</div>\n                    </div>\n                    <div class=\"alert alert-dark row px-0 mx-1\">\n                        <div class=\"col-6\">Координаты</div>\n                        <div class=\"col-6 text-right\">[{this.coord}]</div>\n                    </div>\n                </div>\n            );\n\n    }\n}\n","import React, {Component} from 'react';\nimport {CityCard} from \"./CityCard\";\n\nexport class BigCity extends Component {\n    componentWillMount() {\n        this.setState({json: this.props.json});\n    }\n\n    render() {\n        let name = this.props.json.name;\n        let icon = this.props.json.icon;\n        let temp = this.props.json.temp;\n        let iconLink = \"https://openweathermap.org/img/wn/\" + icon + \"@2x.png\";\n\n        if( this.props.json.clouds == 0) return <div> </div>\n        else\n            return (\n                <div class=\"container pl-0\">\n                    <div class=\"row\">\n                        <div class=\"col-6\">\n                            <h2>{name}</h2>\n                            <div class=\"row\">\n                                <div class=\"col-3\">\n                                    <img alt=\"icon\" width=\"100px\" src={iconLink}/>\n                                </div>\n                                <h1 class=\"col-6 my-auto display-1\">{temp}</h1>\n                            </div>\n                        </div>\n                        <div class=\"col-6\">\n                            <CityCard json={this.props.json}/>\n                        </div>\n                    </div>\n                </div>\n\n            );\n\n    }\n}\n","import React, {Component} from 'react';\nimport {CityCard} from \"./CityCard\";\n\nexport class SavedCity extends Component {\n    componentWillMount() {\n        this.findWeatherDetailsForName(this.props.post.title);\n        this.setState({done: false})\n    }\n\n    appKey = \"2e19bb27bd5e717bac388dc0c1827b17\";\n\n    httpRequestAsync(url, callback) {\n        console.log(\"hello\");\n        var httpRequest = new XMLHttpRequest();\n        httpRequest.onreadystatechange = () => {\n            if (httpRequest.readyState === 4 && httpRequest.status === 200) {\n                callback(httpRequest.responseText);\n                this.setState({error: false})\n            } else if (httpRequest.status === 404) {\n                this.setError();\n            }\n        }\n        httpRequest.open(\"GET\", url, true);\n        httpRequest.send();\n    }\n\n    error;\n\n    setError() {\n        console.log(\"WSYUIurfydgstyr\")\n        this.setState({error: true})\n    }\n\n    findWeatherDetailsForName(searchInput) {\n        this.setState({done: false});\n        if (searchInput === \"\") {\n        } else {\n            let searchLink = \"https://api.openweathermap.org/data/2.5/weather?q=\" + searchInput + \"&appid=\" + this.appKey;\n            this.httpRequestAsync(searchLink, (response) => {\n                let json = JSON.parse(response);\n                this.setState(\n                    {\n                        json: {\n                            name: json.name,\n                            icon: json.weather[0].icon,\n                            coord: json.coord.lon + \", \" + json.coord.lat,\n                            wind: json.wind.speed + \" m/s\",\n                            humidity: json.main.humidity + \" %\",\n                            pressure: json.main.pressure + \" hpa\",\n                            clouds: json.weather[0].description,\n                            temp: parseInt(json.main.temp - 273) + \"°C\"\n                        },\n                        done: true\n                    })\n\n\n            });\n        }\n    }\n\n\n    render() {\n        console.log(this.props.post.title, this.error)\n        if (this.state.error == true)\n\n            return (\n                <div>\n                    Такого города в известной Вселенной нет </div>\n            )\n\n        else {\n            if (this.state.done) {\n\n                let icon = this.state.json.icon;\n                let temp = this.state.json.temp;\n                let iconLink = \"https://openweathermap.org/img/wn/\" + icon + \"@2x.png\";\n                return (\n                    <div class=\"container p-0\">\n                        <div class=\"row pl-3\">\n                            <div class=\"row pl-3\">\n                                <h1 class=\"my-auto\">{temp}</h1>\n                                <img alt=\"icon\" src={iconLink}/>\n                            </div>\n                        </div>\n                        <CityCard json={this.state.json}/>\n                    </div>\n\n                );\n            } else {\n                return (\n                    <div>\n                        <div>{this.props.post.title}</div>\n                        <div>Подождите, данные загружаются</div>\n                        <div className=\"spinner-border m-5\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n                )\n            }\n        }\n\n    }\n}\n\n\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {SavedCity} from \"./SavedCity\";\n\n\nclass CitiesPanel extends Component {\n    prevId = Math.round(Math.random() * 100);\n    handleSubmit = event => {\n\n        if (this.props.posts.length === 2)\n            document.getElementById(\"errortext\").innerText = \"Нельзя больше 2 городов\"\n        else {\n            document.getElementById(\"errortext\").innerText = \" \"\n            event.preventDefault();\n            const title = this.getTitle.value;\n            const data = {\n                id: (this.prevId += 1),\n                title\n            };\n            console.log(data);\n            this.props.dispatch({\n                type: \"ADD_CITY\",\n                data\n            });\n            this.getTitle.value = '';\n        }\n    };\n\n    delete() {\n        // event.preventDefault();\n        const data = {\n            id: this.id\n        };\n        console.log(data);\n        this.props.dispatch({\n            type: \"DELETE_CITY\",\n            data\n        });\n    };\n\n\n    id;\n\n    render() {\n\n        return (\n            <div class=\"container fav\">\n                <div>\n                    <div class=\"container pl-0\">\n                        <div class=\"row\">\n                            <div class=\"col-6 px-0 sh\">Избранное</div>\n                            <div class=\"col-6 text-right my-auto form-group\">\n                                <div>\n                                <input class=\"favourite-input input_advance\" ref={input => this.getTitle = input} required type=\"text\"\n                                       placeholder=\"Добавить новый город\"/>\n                                <button type=\"buton\" class=\"btn-circle\" onClick={this.handleSubmit}>+</button>\n                                </div>\n                                <div id=\"errortext\" class=\"text-center error\"> </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    {this.props.posts.map(post =>\n                        (<div class=\"col-6\">\n                                <div class=\"row mt-2\">\n                                    <div class=\"col-6 mb-0 mt-2\"><h2 class=\"mb-0\">{post.title}</h2></div>\n                                    <div class=\"col-6 text-right\">\n                                        <button class=\"btn-circle\" onClick={() => {\n                                            this.id = post.id;\n                                            this.delete();\n                                        }}>X\n                                        </button>\n                                    </div>\n                                </div>\n                                <SavedCity key={post.id} post={post}/>\n                            </div>\n                        ))}\n                </div>\n            </div>\n        );\n\n    }\n\n\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        posts: state\n    }\n}\nexport default connect(mapStateToProps)(CitiesPanel);\n\n","import React, {Component} from 'react';\nimport {BigCity} from \"./BigCity\";\nimport CitiesPanel from \"./CitiesPanel\";\n\nexport class Wrapper extends Component {\n\n    componentWillMount() {\n        this.setState({\n            positionAllowed: false, downloadFlag: false, json: {\n                coord: \"0\",\n                wind: \"0\",\n                humidity: \"0\",\n                pressure: \"0\",\n                clouds: \"0\",\n                name: \"\",\n                temp: \"\",\n                icon: \" \"\n            },\n            done: \"noreq\"\n        });\n        navigator.geolocation.getCurrentPosition((position) => {\n                this.setState({positionAllowed: true});\n                this.findWeatherDetailsForCoords(position.coords)\n\n            },\n            (position) => {\n                this.setState({positionAllowed: false});\n                console.log(this.state.json)\n\n            });\n\n\n    }\n\n    render() {\n        if (this.state.error == true)\n\n            return (\n                <div className=\"container\">\n                    <div class=\"row pl-3\">\n                        <span className=\"sh mr-4 pr-15\">Найти погоду здесь</span>\n                        <input class=\"favourite-input my-auto\" value={this.state.inputValue} placeholder=\"Введите город\"\n                               onChange={evt => this.updateInputValue(evt)}/>\n\n                        <button class=\"btn btn-secondary my-auto\" onClick={() => {\n                            this.findWeatherDetailsForName(this.state.inputValue)\n\n                        }}>Поиск\n                        </button>\n                    </div>\n                    <h2 class=\"error\">Такого города во вселенной нет</h2>\n                    <CitiesPanel/>\n\n                </div>\n            )\n        else {\n            if (this.state.positionAllowed) {\n                //alert(1);\n                return (\n                    <div>\n                        <header>\n                            <div class=\"container\">\n                                <div class=\"row pl-3\">\n                                    <div class=\"col-4\">\n                                        <span class=\"sh \">Погода здесь</span>\n                                    </div>\n                                    <div class=\"col-3 my-auto mx-auto\">\n                                        <button class=\"btn btn-secondary \" onClick={() => {\n                                            navigator.geolocation.getCurrentPosition((position) => {\n\n                                                this.findWeatherDetailsForCoords(position.coords)\n                                            })\n                                        }}>Обновить геолокацию\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </header>\n                        <BigCity json={this.state.json} done={this.state.done}/>\n                        <CitiesPanel/>\n                    </div>\n                );\n            } else {\n                if (this.state.done) {\n\n                    return (\n                        <div class=\"container\">\n                            <div class=\"row pl-3\">\n                                <span class=\"sh mr-4 pr-5\">Найти погоду здесь</span>\n                                <input class=\"favourite-input my-auto \" value={this.state.inputValue}\n                                       onChange={evt => this.updateInputValue(evt)} placeholder=\"Введите город\"/>\n\n                                <button class=\"btn btn-secondary my-auto\" onClick={() => {\n                                    this.findWeatherDetailsForName(this.state.inputValue)\n\n                                }}>Поиск\n                                </button>\n                            </div>\n                            <BigCity json={this.state.json} />\n                            <CitiesPanel/>\n\n                        </div>\n                    )\n                }\n                // else if (this.state.done==\"noreq\"){\n                //\n                //     return (\n                //         <div class=\"container\">\n                //             <div class=\"row pl-3\">\n                //                 <span class=\"sh mr-4 pr-5\">Найти погоду здесь</span>\n                //                 <input class=\"favourite-input my-auto \" value={this.state.inputValue}\n                //                        onChange={evt => this.updateInputValue(evt)} placeholder=\"Введите город\"/>\n                //\n                //                 <button class=\"btn btn-secondary my-auto\" onClick={() => {\n                //                     this.findWeatherDetailsForName(this.state.inputValue)\n                //\n                //                 }}>Поиск\n                //                 </button>\n                //             </div>\n                //             <CitiesPanel/>\n                //\n                //         </div>\n                //     )\n                //\n                // }\n                else {\n                    return (\n                        <div class=\"container text-center\">\n                            <div className=\"row pl-3\">\n                                <div className=\"col-4\">\n                                    <span className=\"sh \">Погода здесь</span>\n                                </div>\n                                <div className=\"col-3 my-auto mx-auto\">\n                                    <button className=\"btn btn-secondary \" onClick={() => {\n                                        navigator.geolocation.getCurrentPosition((position) => {\n\n                                            this.findWeatherDetailsForCoords(position.coords)\n                                        })\n                                    }}>Обновить геолокацию\n                                    </button>\n                                </div>\n\n                            </div>\n                            <h1>Подождите, данные загружаются</h1>\n                            <div className=\"spinner-border m-5\" role=\"status\">\n                                <span className=\"sr-only\">Loading...</span>\n                            </div>\n                            <CitiesPanel/>\n                        </div>\n\n                    );\n\n                }\n            }\n        }\n    }\n\n    updateInputValue(evt) {\n        this.setState({\n            inputValue: evt.target.value\n        });\n    }\n\n    appKey = \"2e19bb27bd5e717bac388dc0c1827b17\";\n\n    findWeatherDetailsForName(searchInput) {\n        this.setState({done: false});\n        if (searchInput === \"\") {\n            // alert(\"tut\")\n        } else {\n            let searchLink = \"https://api.openweathermap.org/data/2.5/weather?q=\" + searchInput + \"&appid=\" + this.appKey;\n            // alert(searchInput);\n            this.httpRequestAsync(searchLink, (response) => {\n                let json = JSON.parse(response);\n                this.setState({\n                    json: {\n                        coord: json.coord.lon + \", \" + json.coord.lat,\n                        wind: json.wind.speed + \" m/s\",\n                        humidity: json.main.humidity + \" %\",\n                        pressure: json.main.pressure + \" hpa\",\n                        clouds: json.weather[0].description,\n                        icon: json.weather[0].icon,\n                        name: json.name,\n                        temp: parseInt(json.main.temp - 273) + \"°C\"\n                    },\n                    done: true\n                })\n\n\n            });\n        }\n    }\n\n    findWeatherDetailsForCoords(coords) {\n        this.setState({done: false});\n        let searchLink = \"https://api.openweathermap.org/data/2.5/weather?lat=\" + coords.latitude + \"&lon=\" + coords.longitude + \"&appid=\" + this.appKey;\n        this.httpRequestAsync(searchLink, (response) => {\n            let json = JSON.parse(response);\n            this.setState({\n                json: {\n                    coord: json.coord.lon + \", \" + json.coord.lat,\n                    wind: json.wind.speed + \" m/s\",\n                    humidity: json.main.humidity + \" %\",\n                    pressure: json.main.pressure + \" hpa\",\n                    clouds: json.weather[0].description,\n                    icon: json.weather[0].icon,\n                    name: json.name,\n                    temp: parseInt(json.main.temp - 273) + \"°C\"\n                },\n                done: true\n            })\n\n        });\n\n    }\n\n    // theResponse(response) {\n    //     let jsonObject = JSON.parse(response);\n    //     this.json = jsonObject;\n    //     // this.set(jsonObject);\n    //      console.log(jsonObject)\n    // }\n\n\n    httpRequestAsync(url, callback) {\n        console.log(\"hello\");\n        var httpRequest = new XMLHttpRequest();\n        httpRequest.onreadystatechange = () => {\n            if (httpRequest.readyState === 4 && httpRequest.status === 200) {\n                callback(httpRequest.responseText);\n                this.setState({error: false})\n\n            } else if (httpRequest.status === 404) {\n                this.setError();\n            }\n        }\n        httpRequest.open(\"GET\", url, true);\n        httpRequest.send();\n    }\n\n    //  set(jsonObject)\n    // {\n    //     alert(jsonObject)\n    //     // var source   = document.getElementById('text-template-true').innerHTML;\n    //     // var template = Handlebars.compile(source);\n    //     // var context = {city_name: jsonObject.name,\n    //     //     weather: jsonObject.weather[0].main,\n    //     //     temp: parseInt(jsonObject.main.temp - 273) + \"°\",\n    //     //     hum: jsonObject.main.humidity + \"%\",\n    //     //     wind_spd: jsonObject.wind.speed + \" mps\"};\n    //     // var html = template(context);\n    //     //\n    //     // document.getElementById('result').innerHTML = html;\n    // }\n\n    error;\n\n    setError() {\n        this.setState({error: true})\n    }\n\n\n}\n","import React from 'react';\nimport './App.css';\nimport {Wrapper} from \"./components/Wrapper\";\n\n\n\n\nfunction App() {\n  return (\n    <div >\n      <header >\n      </header>\n      <Wrapper />\n\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const cityReducer = (state = [], action) => {\n    switch (action.type) {\n        case \"ADD_CITY\":\n            return state.concat([action.data]);\n        case \"DELETE_CITY\":\n            return state.filter(el => el.id !== action.data.id);\n        default:\n            return state;\n    }\n}\nexport default cityReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './App.css';\nimport cityReducer from './reducer/reducer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {Provider} from 'react-redux';\nimport { createStore } from 'redux';\n\nconst saveState = (state) => {\n    try {\n        // Convert the state to a JSON string\n        const serialisedState = JSON.stringify(state);\n\n        // Save the serialised state to localStorage against the key 'app_state'\n        window.localStorage.setItem('app_state', serialisedState);\n    } catch (err) {\n        // Log errors here, or ignore\n    }\n};\nconst loadState = () => {\n    try {\n        // Load the data saved in localStorage, against the key 'app_state'\n        const serialisedState = window.localStorage.getItem('app_state');\n\n        // Passing undefined to createStore will result in our app getting the default state\n        // If no data is saved, return undefined\n        if (!serialisedState) return undefined;\n\n        // De-serialise the saved state, and return it.\n        return JSON.parse(serialisedState);\n    } catch (err) {\n        // Return undefined if localStorage is not available,\n        // or data could not be de-serialised,\n        // or there was some other error\n        return undefined;\n    }\n};\n\n/**\n * This is where you create the app store\n */\nconst oldState = loadState();\nconst store = createStore(cityReducer, oldState);\nstore.subscribe(() => {\n    saveState(store.getState());\n});\nReactDOM.render(<Provider store={store}> <App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}